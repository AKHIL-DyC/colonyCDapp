# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

input TokenFromEverywhereArguments {
  tokenAddress: String!
}

type TokenFromEverywhereReturn {
  items: [Token]
}

enum TokenType {
  COLONY
  ERC20
}

type Query {
  getTokenFromEverywhere(input: TokenFromEverywhereArguments): TokenFromEverywhereReturn @function(name: "fetchTokenFromChain-dev")
}

type Profile {
  avatar: String
  thumbnail: String
  displayName: String
  bio: String
  location: String
  website: String
}

type Status {
  unlocked: Boolean
  canMint: Boolean
  canUnlock: Boolean
  recovery: Boolean
  deploymentFinished: Boolean
}

type Token @model {
  id: ID! @index(name: "byAddress", queryField: "getTokenByAddress") # contract address
  name: String!
  symbol: String!
  decimals: Int!
  type: TokenType
    @index(name: "byType", queryField: "getTokensByType")
  colonies: [Colony] @manyToMany(relationName: "ColonyTokens")
  users: [User] @manyToMany(relationName: "UserTokens")
  status: Status
}

type Colony @model {
  id: ID! @index(name: "byAddress", queryField: "getColonyByAddress") # contract address
  name: String! @index(name: "byName", queryField: "getColonyByName")
  nativeToken: Token! @hasOne
  tokens: [Token] @manyToMany(relationName: "ColonyTokens")
  profile: Profile
  status: Status
}

type User @model {
  id: ID! @index(name: "byAddress", queryField: "getUserByAddress") # wallet address
  name: String! @index(name: "byName", queryField: "getUserByName")
  tokens: [Token] @manyToMany(relationName: "UserTokens")
  profile: Profile
}
